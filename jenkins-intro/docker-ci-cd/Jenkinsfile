def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
    agent any

    tools {
        maven "Maven3"
        jdk "OracleJDK8"
    }

    environment {
        registryCredential = 'ecr:regioncode:CredentialIdInJenkins'
        appRegistry = 'REGISTRYUrl/registryname'
        vprofileRegistry = 'REGISTRYUrl'
        cluster = 'clustername'
        service = 'servicename'
    }

    stages {
        stage('Fetch code from git') {
            steps {
                git branch: 'docker', url: 'https://github.com/devopshydclub/vprofile-project.git'
            }
        }

        stage('Testing project') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar analysis') {
            environment {
                scannerHome = tool 'Sonar4.7'
            }

            steps {
                withSonarQubeEnv('Sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
                }
            }
        }

        stage('Quality gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build image with Docker') {
            script {
                dockerImage = docker.build( appRegistry + ":${BUILD_NUMBER}", "./Docker-files/app/multistage/" )
            }
        }

        stage('Upload app image to ECR') {
            steps {
                script {
                    docker.withRegistry( vprofileRegistrym, registryCredential ) {
                        dockerImage.push( "${BUILD_NUMBER}" )
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage('Deploy app to ECS') {
            steps {
                withAWS(credentials: 'AWSCredentials', region: 'us-east-1') {
                    sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
                }
            }
        }
    }

    post {
        always {
            echo 'Slack notifications.'
            slackSend channel: '#jenkins-ci-cd',
                color: COLOR_MAP[currentBuild.currentResult]
                message: "*${currentBuild.currentResult}:* Job: ${env.JOB_NAME} build: ${env.BUILD_ID}\nMore info at: ${env.BUILD_URL}"
        }
    }
}